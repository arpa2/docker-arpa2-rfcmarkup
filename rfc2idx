#!/usr/bin/python
#
# rfc2idx.py -- Construct a keyword index for an RFC
#
# From: Rick van Rein <rick@openfortress.nl>


#
# This command is invoked with an rfcNNNN.txt file holding an RFC, and it
# produces an rfcNNNN.idx file holding the following whitespace-separated
# triplets:
# 
# keyword  rfcNNNN  byteoffset
#
# This is done for anything that looks like a keyword followed by a defining
# symbol ::= on the beginning of a line.  This symbold captures both ASN.1
# and BNF notations of definitions.  The corresponding byte offset for
# the keyword start is recorded, and this helps presentation software to
# index the file, as well as to distinguish definitions from uses.
#
# Multiple occurrences of the same keyword may occur in these files, but
# the later occurrences are not normally used for references; they may
# however help to distinguish (additional) definitions from uses.
#
# References to other RFCs are recognised in bibliography sections, and
# any rfcNNNN.idx file for such references are included, in the order of
# appearance in the bibliography, at the end of this file; the result is
# that definitions of keywords in referenced RFCs are incorporated in the
# index for the referring RFC.
#
# Based on this information, a list of keywords for an RFC can be built,
# and its occurrences can be marked as either a reference or a definition.
# Tools such as rfcmarkup can hereby provide an excellent user experience
# by permitting clicks to find a definition.
#
# Finally, it is possible to build a keyword index to search through a
# collection of RFCs.  The keywords are reverse-sorted; first on keyword
# and then on RFC number, so basically a reverse-alphabetic sort on the
# concatenation of all .idx files.  Duplicates are the result of inclusion
# of references and must be removed (or might be filtered out while listing
# an index).  This can simply be done with a shell script:
#
#	for f in $( ls -r rfc*.idx )
#	do
#		grep $( echo $f | sed 's/\.idx$//' ) $f
#	done | sort -u > rfc-index.idx
#
# It is also easy to run this command on all RFCs in a directory:
#
#	for f in $( ls rfc*.txt )
#	do
#		rfc2idx.py $f
#	done
#
# Note that this may need to run twice when references are not immediately
# found; this can occur because RFC Clusters can lead to forward references.
# which can at least occur due to RFC clusters.
#
# So, how to use this?  Say you are interested in the def of Authenticator.
# Finding the documents containing it is easy:
#
#	grep '^Authenticator ' rfc-index.idx \
# 		| cut -d ' ' -f 2 \
#		| sed 's/$/.txt/'
#
#
# Opening the files found is also easy:
#
# less '+/*^[ \t]*Authenticator[ \t]*::=[ \t]*' rfclist...
#
# Combining them, we get
#
# rfc() { less '+/*^[ \t]*$1[ \t]*::=[ \t]*` `grep '^Authenticator ' rfc-index.idx | cut -d ' ' -f 2 | sort -k 1.4 -run | sed 's/$/.txt/'` ; }
#


import sys
import re


#
# Parse commandline
#
if not 2 <= len (sys.argv) <= 3:
	sys.stderr.write ('Usage: ' + sys.argv [0] + ' rfcNNNN.txt [rfcNNNN.idx]\n')
	sys.exit (1)
elif sys.argv [1] [:3] != 'rfc' or sys.argv [1] [-4:] != '.txt':
	sys.stderr.write ('First file name should be of the form rfcNNNN.txt\n')
	sys.exit (1)

defrfc = sys.argv [1] [:-4]
infn = sys.argv [1]
if len (sys.argv) == 3:
	otfn = sys.argv [2]
else:
	otfn = defrfc + '.idx'


#
# Prepare for action
#
defrex = re.compile ('(^[ \t]*)(\<?[a-zA-Z_][a-zA-Z-]*\>?)[ \t]*::=')
refrex = re.compile ('^[ \t]*\[RFC-?0*([1-9][0-9]*)\]')

inf = open (infn, 'r')
otf = open (otfn, 'w')

#
# Iterate over lines, parsing their contents
#
refs = [ ]
ofs = 0
chaserefs = False
for line in inf.readlines ():
	#
	# Recognise keyword definitions
	#
	match = defrex.match (line)
	if match:
		defofs = ofs + len (match.group (1))
		defkwd = match.group (2)
		otf.write (defkwd + ' ' + defrfc + ' ' + str (defofs) + '\n')
		# print 'Defining', defkwd
	#
	# Recognise reference sections and chase all but informative references
	#
	match = refrex.match (line)
	if match:
		if chaserefs:
			refs.append ('rfc' + match.group (1))
	elif line.find ('References') != -1:
		# chaserefs = (line.find ('Informative') == -1)
		chaserefs = (line.find ('Normative') != -1)
		# print 'Setting chaserefs to', chaserefs, 'for', line,
	ofs = ofs + len (line)

for ref in refs:
	try:
		while ref [:1] == '0':
			ref = ref [1:]
		reff = open (ref + '.idx', 'r')
		for line in reff.readlines ():
			#
			# Remove indirect references
			#
			if line.split () [1] == ref:
				otf.write (line)
		reff.close ()
	except IOError:
		sys.stderr.write ('WARNING: Failed to append ' + ref + '.idx\n')

inf.close ()
otf.close ()

